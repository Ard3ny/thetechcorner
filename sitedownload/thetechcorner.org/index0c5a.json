{"id":1382,"date":"2022-03-05T16:04:00","date_gmt":"2022-03-05T16:04:00","guid":{"rendered":"https:\/\/thetechcorner.org\/?p=1382"},"modified":"2022-03-06T19:14:28","modified_gmt":"2022-03-06T19:14:28","slug":"diagnose-and-address-routine-selinux-policy-violations","status":"publish","type":"post","link":"https:\/\/thetechcorner.org\/?p=1382","title":{"rendered":"Diagnose and address routine SELinux policy violations"},"content":{"rendered":"\n<p>SELinux isolates all processes running on the system to mitigate attacks which take advantage of privilege escalation. Privilege escalation means that a process gains more access rights than it should have.<\/p>\n\n\n\n<p>To prevent this, SELinux enforces Mandatory Access Control (MAC) mechanism over all processes. It labels every process, file, or directory according to rules specified in a security policy known as the SELinux policy.<\/p>\n\n\n\n<p>The SELinux policy also specifies how processes interact with each other and how they can access files and directories. SELinux denies every action that it is not explicitly allowed by the SELinux policy.<\/p>\n\n\n\n<p>The most common causes why SELinux denies an action are:<\/p>\n\n\n\n<ul><li>Processes, files, or directories are labeled with incorrect SELinux context<\/li><li>confined processes are configured in a different way than what is expected by the default SELinux policy<\/li><li>there is a bug in the SELinux policy or in an application<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p><strong>Let&#8217;s make a violation first, so we can investigate something.<\/strong> To create violation we need to create conflict in some SELINUX policy. I&#8217;ve done some googling and find an easy way to make one. Shoutout to this<a href=\"https:\/\/superuser.com\/questions\/908373\/a-way-to-trigger-an-selinux-policy-violation\"> blog post<\/a>.<\/p>\n\n\n\n<ol><li>By default (in CentOS at the time of writing) unprivileged, non-system users are logged in as the &#8216;unconfined_u&#8217; role. However we can change our system so that our unprivileged user &#8216;alice&#8217; is placed into the &#8216;user_u&#8217; role instead. The default policies can be made to clearly restrict this role with only a small amount of additional configuration.<code>[root]# echo \"alice:user_u:s0-s0:c0.c1023\" >> \/etc\/selinux\/targeted\/seusers<\/code><\/li><li>Now switch off the ability for these users to execute files located in their home directories and \/tmp. Once again, the default is to allow this behaviour.\u00a0<strong>This command may take a moment to complete<\/strong>.<code>[root]# setsebool -P user_exec_content off<\/code><\/li><li>Now (with our unprivileged user) we can log in and attempt to execute something on one of these no go areas. As you can see, we are denied.<code>[alice]$ cp \/bin\/ls \/tmp\/ [alice]$ \/tmp\/ls -bash: \/tmp\/ls: Permission denied<\/code><\/li><\/ol>\n\n\n\n<p><\/p>\n\n\n\n<p><strong>Other ways to read denial information<\/strong><\/p>\n\n\n\n<p>The friendly developers that work with SELinux on a daily basis have made a few tools that help you identify SELinux-related issues.<\/p>\n\n\n\n<h4>ausearch<\/h4>\n\n\n\n<p>The&nbsp;<strong>ausearch<\/strong>&nbsp;utility is not an SELinux-specific utility. It is a Linux audit related utility, which parses the audit logs and allows you to query the entries in the logs. One of the advantages that it shows is that it already converts the time stamp into a human readable one<\/p>\n\n\n\n<div class=\"is-layout-flow wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-preformatted\">auserach -m AVC,USER_AVC,SELINUX_ERR<\/pre>\n<\/div><\/div>\n\n\n\n<ol><li>The\u00a0<code>-m<\/code>\u00a0option specifies what kind of information ausearch returns.The\u00a0<code>-ts<\/code>\u00a0option specifies the time stamp. For example\u00a0<code>-ts recent<\/code>\u00a0returns AVC messages from the last 10 minutes or\u00a0<code>-ts today<\/code>\u00a0returns messages from the whole day.<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-full is-style-default\"><img decoding=\"async\" loading=\"lazy\" width=\"640\" height=\"74\" src=\"https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=640%2C74&#038;ssl=1\" alt=\"\" class=\"wp-image-1386\" srcset=\"https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?w=925&amp;ssl=1 925w, https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=300%2C35&amp;ssl=1 300w, https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=768%2C89&amp;ssl=1 768w, https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=24%2C3&amp;ssl=1 24w, https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=36%2C4&amp;ssl=1 36w, https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/03\/image-23.png?resize=48%2C6&amp;ssl=1 48w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h4>sealert<\/h4>\n\n\n\n<p>The\u00a0<strong>sealert<\/strong>\u00a0command is not provided on an SELinux-enabled Gentoo system by default, but it is available on RedHat Enterprise Linux and related distributions. It integrates together with a specific daemon called\u00a0<strong>setroubleshootd<\/strong>, which gives a translation of an AVC denial similar to the human translation given earlier in this tutorial. For instance, the following message can be displayed in the system logs:<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>Few more other ways could be:<\/p>\n\n\n\n<div class=\"is-layout-flow wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-preformatted\">audit2why -a<\/pre>\n<\/div><\/div>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>SELinux isolates all processes running on the system to mitigate attacks which take advantage of [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":1332,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"nf_dc_page":"","om_disable_all_campaigns":false,"_mi_skip_tracking":false},"categories":[219],"tags":[406,489,329,488],"jetpack_featured_media_url":"https:\/\/i0.wp.com\/thetechcorner.org\/wp-content\/uploads\/2022\/02\/rhsa-Manage-security.png?fit=1280%2C720&ssl=1","_links":{"self":[{"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/posts\/1382"}],"collection":[{"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=%2Fwp%2Fv2%2Fcomments&post=1382"}],"version-history":[{"count":2,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/posts\/1382\/revisions"}],"predecessor-version":[{"id":1387,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/posts\/1382\/revisions\/1387"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=\/wp\/v2\/media\/1332"}],"wp:attachment":[{"href":"https:\/\/thetechcorner.org\/index.php?rest_route=%2Fwp%2Fv2%2Fmedia&parent=1382"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=%2Fwp%2Fv2%2Fcategories&post=1382"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/thetechcorner.org\/index.php?rest_route=%2Fwp%2Fv2%2Ftags&post=1382"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}